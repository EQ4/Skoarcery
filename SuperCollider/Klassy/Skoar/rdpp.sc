// ==================================================================================================================================
// rdpp.sc.sc - Generated by Code_Parser_Sc - Create Recursive Descent Predictive Parser on 2014-10-19 14:36:50 for SuperCollider 3.6
// ==================================================================================================================================

SkoarParseException : Exception {

}

SkoarParser {

    var <runtime, <toker, <tab, desirables;

    *new {
        | runtime |
        ^super.new.init( runtime )
    }

    init {
        | runtime |

        runtime = runtime;
        toker = runtime.toker;
        tab = 0;
        desirables = IdentityDictionary();
        this.init_desirables();
    }

    fail {
        toker.dump;
        SkoarParseException("Fail").throw;
    }

    //print {
    //    | line, end |
    //    (line ++ end).postln;
    //}

    init_desirables {

        // listy_entries
        desirables.put('listy_entries -> skoaroid moar_listy_entries', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);

        // optional_al_coda
        desirables.put('optional_al_coda -> AlCoda', [Toke_AlCoda]);

        // block
        desirables.put('block -> BlockSep BlockName BlockSep block_lines BlockSep', [Toke_BlockSep]);

        // assignment
        desirables.put('assignment -> AssOp settable', [Toke_AssOp]);

        // skoaroid_prime
        desirables.put('skoaroid_prime -> assignment skoaroid_prime', [Toke_AssOp]);

        // beat
        desirables.put('beat -> Crotchets', [Toke_Crotchets]);
        desirables.put('beat -> Quavers', [Toke_Quavers]);
        desirables.put('beat -> Quarters', [Toke_Quarters]);
        desirables.put('beat -> Eighths', [Toke_Eighths]);
        desirables.put('beat -> Slash', [Toke_Slash]);

        // msg
        desirables.put('msg -> MsgNameWithArgs listy_suffix', [Toke_MsgNameWithArgs]);
        desirables.put('msg -> MsgName', [Toke_MsgName]);
        desirables.put('msg -> listy', [Toke_ListS]);

        // listy_suffix
        desirables.put('listy_suffix -> listy_entries ListE', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);

        // boolean
        desirables.put('boolean -> skoaroid BooleanOp skoaroid', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);

        // optional_voice
        desirables.put('optional_voice -> Voice', [Toke_Voice]);

        // stmt
        desirables.put('stmt -> skoaroid msg_chain_node', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);

        // optional_stmt
        desirables.put('optional_stmt -> stmt', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);
        desirables.put('optional_stmt -> Newline', [Toke_Newline]);

        // skoaroid
        desirables.put('skoaroid -> nouny skoaroid_prime', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);

        // marker
        desirables.put('marker -> Segno', [Toke_Segno]);
        desirables.put('marker -> Fine', [Toke_Fine]);
        desirables.put('marker -> coda', [Toke_Coda]);
        desirables.put('marker -> Volta', [Toke_Volta]);
        desirables.put('marker -> Bars', [Toke_Bars]);

        // moar_listy_entries
        desirables.put('moar_listy_entries -> ListSep listy_entries', [Toke_ListSep]);
        desirables.put('moar_listy_entries -> Newline', [Toke_Newline]);

        // branches
        desirables.put('branches -> branch branches', [Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_Float, Toke_Tuplet, Toke_Bars,
                   Toke_OttavaB, Toke_Rep, Toke_DynFP, Toke_Quavers, Toke_Loco,
                   Toke_Segno, Toke_Coda, Toke_BlockRef, Toke_OnBeat, Toke_Portamento,
                   Toke_PedalDown, Toke_DalSegno, Toke_Newline, Toke_String, Toke_Crotchets,
                   Toke_Carrot, Toke_BlockSep, Toke_Meter, Toke_DynForte, Toke_Eighths,
                   Toke_Symbol, Toke_Quarters, Toke_DaCapo, Toke_Choard, Toke_DynSFZ,
                   Toke_PedalUp, Toke_LWing, Toke_Volta, Toke_Int, Toke_Slur,
                   Toke_Comment, Toke_Caesura, Toke_OctaveShift, Toke_DynPiano, Toke_Voice,
                   Toke_NamedNoat, Toke_OttavaA, Toke_CondS, Toke_Slash, Toke_Fine,
                   Toke_ListS]);

        // listy
        desirables.put('listy -> ListS listy_suffix', [Toke_ListS]);

        // nouny_literal
        desirables.put('nouny_literal -> Tuplet', [Toke_Tuplet]);
        desirables.put('nouny_literal -> Caesura', [Toke_Caesura]);
        desirables.put('nouny_literal -> Slur', [Toke_Slur]);
        desirables.put('nouny_literal -> Int', [Toke_Int]);
        desirables.put('nouny_literal -> Float', [Toke_Float]);
        desirables.put('nouny_literal -> String', [Toke_String]);
        desirables.put('nouny_literal -> BlockRef', [Toke_BlockRef]);
        desirables.put('nouny_literal -> Choard', [Toke_Choard]);
        desirables.put('nouny_literal -> NamedNoat', [Toke_NamedNoat]);
        desirables.put('nouny_literal -> Symbol', [Toke_Symbol]);
        desirables.put('nouny_literal -> OnBeat', [Toke_OnBeat]);

        // dynamic
        desirables.put('dynamic -> DynPiano', [Toke_DynPiano]);
        desirables.put('dynamic -> DynForte', [Toke_DynForte]);
        desirables.put('dynamic -> DynSFZ', [Toke_DynSFZ]);
        desirables.put('dynamic -> DynFP', [Toke_DynFP]);

        // cthulhu
        desirables.put('cthulhu -> LWing CondSep cthulhu_prime', [Toke_LWing]);

        // phrases
        desirables.put('phrases -> phrasey phrases', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Bars,
                   Toke_OttavaB, Toke_Rep, Toke_DynFP, Toke_Quavers, Toke_Loco,
                   Toke_Segno, Toke_Coda, Toke_BlockRef, Toke_OnBeat, Toke_Portamento,
                   Toke_PedalDown, Toke_DalSegno, Toke_String, Toke_Crotchets, Toke_Carrot,
                   Toke_Meter, Toke_DynForte, Toke_Eighths, Toke_Symbol, Toke_Quarters,
                   Toke_DaCapo, Toke_Choard, Toke_DynSFZ, Toke_PedalUp, Toke_LWing,
                   Toke_Volta, Toke_Int, Toke_Slur, Toke_Comment, Toke_Caesura,
                   Toke_OctaveShift, Toke_DynPiano, Toke_NamedNoat, Toke_OttavaA, Toke_CondS,
                   Toke_Slash, Toke_Fine, Toke_ListS]);

        // musical_keyword_misc
        desirables.put('musical_keyword_misc -> Rep', [Toke_Rep]);
        desirables.put('musical_keyword_misc -> Portamento', [Toke_Portamento]);
        desirables.put('musical_keyword_misc -> Carrot', [Toke_Carrot]);

        // cthulhu_prime
        desirables.put('cthulhu_prime -> boolean CondSep RWing', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);
        desirables.put('cthulhu_prime -> Nosey CondSep RWing', [Toke_Nosey]);

        // pedally
        desirables.put('pedally -> PedalDown', [Toke_PedalDown]);
        desirables.put('pedally -> PedalUp', [Toke_PedalUp]);

        // settable
        desirables.put('settable -> Caesura', [Toke_Caesura]);
        desirables.put('settable -> OnBeat', [Toke_OnBeat]);
        desirables.put('settable -> Symbol', [Toke_Symbol]);
        desirables.put('settable -> listy', [Toke_ListS]);
        desirables.put('settable -> Quarters', [Toke_Quarters]);
        desirables.put('settable -> Eighths', [Toke_Eighths]);

        // al_x
        desirables.put('al_x -> AlCoda', [Toke_AlCoda]);
        desirables.put('al_x -> AlSegno', [Toke_AlSegno]);
        desirables.put('al_x -> AlFine', [Toke_AlFine]);

        // musical_keyword
        desirables.put('musical_keyword -> dynamic', [Toke_DynForte, Toke_DynFP, Toke_DynSFZ, Toke_DynPiano]);
        desirables.put('musical_keyword -> ottavas', [Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_OctaveShift, Toke_Loco, Toke_OttavaA,
                   Toke_OttavaB]);
        desirables.put('musical_keyword -> pedally', [Toke_PedalUp, Toke_PedalDown]);
        desirables.put('musical_keyword -> musical_keyword_misc', [Toke_Portamento, Toke_Rep, Toke_Carrot]);

        // conditional
        desirables.put('conditional -> CondS optional_stmt CondSep boolean CondSep optional_stmt CondE', [Toke_CondS]);

        // branch
        desirables.put('branch -> optional_voice phrases Newline', [Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_Float, Toke_Tuplet, Toke_Bars,
                   Toke_OttavaB, Toke_Rep, Toke_DynFP, Toke_Quavers, Toke_Loco,
                   Toke_Segno, Toke_Coda, Toke_BlockRef, Toke_OnBeat, Toke_Portamento,
                   Toke_PedalDown, Toke_DalSegno, Toke_Newline, Toke_String, Toke_Crotchets,
                   Toke_Carrot, Toke_Meter, Toke_DynForte, Toke_Eighths, Toke_Symbol,
                   Toke_Quarters, Toke_DaCapo, Toke_Choard, Toke_DynSFZ, Toke_PedalUp,
                   Toke_LWing, Toke_Volta, Toke_Int, Toke_Slur, Toke_Comment,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynPiano, Toke_Voice, Toke_NamedNoat,
                   Toke_OttavaA, Toke_CondS, Toke_Slash, Toke_Fine, Toke_ListS]);
        desirables.put('branch -> block Newline', [Toke_BlockSep]);

        // dal_goto
        desirables.put('dal_goto -> DaCapo al_x', [Toke_DaCapo]);
        desirables.put('dal_goto -> DalSegno al_x', [Toke_DalSegno]);

        // msg_chain_node
        desirables.put('msg_chain_node -> optional_soak MsgOp msg msg_chain_node', [Toke_Soak, Toke_MsgOp]);

        // phrasey
        desirables.put('phrasey -> Comment', [Toke_Comment]);
        desirables.put('phrasey -> marker', [Toke_Bars, Toke_Coda, Toke_Volta, Toke_Segno, Toke_Fine]);
        desirables.put('phrasey -> Meter', [Toke_Meter]);
        desirables.put('phrasey -> skoaroid', [Toke_QuindicesimaA, Toke_Float, Toke_QuindicesimaB, Toke_Tuplet, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_OttavaB, Toke_LWing, Toke_Rep,
                   Toke_DynFP, Toke_Int, Toke_Loco, Toke_Slur, Toke_BlockRef,
                   Toke_OnBeat, Toke_Portamento, Toke_Caesura, Toke_PedalDown, Toke_String,
                   Toke_OctaveShift, Toke_DynPiano, Toke_Carrot, Toke_DynForte, Toke_NamedNoat,
                   Toke_Symbol, Toke_OttavaA, Toke_CondS, Toke_ListS]);
        desirables.put('phrasey -> dal_goto', [Toke_DalSegno, Toke_DaCapo]);
        desirables.put('phrasey -> beat', [Toke_Quavers, Toke_Quarters, Toke_Slash, Toke_Crotchets, Toke_Eighths]);

        // ottavas
        desirables.put('ottavas -> OctaveShift', [Toke_OctaveShift]);
        desirables.put('ottavas -> OttavaA', [Toke_OttavaA]);
        desirables.put('ottavas -> OttavaB', [Toke_OttavaB]);
        desirables.put('ottavas -> QuindicesimaA', [Toke_QuindicesimaA]);
        desirables.put('ottavas -> QuindicesimaB', [Toke_QuindicesimaB]);
        desirables.put('ottavas -> Loco', [Toke_Loco]);

        // block_line
        desirables.put('block_line -> phrases Newline', [Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_Float, Toke_Tuplet, Toke_Bars,
                   Toke_OttavaB, Toke_Rep, Toke_DynFP, Toke_Quavers, Toke_Loco,
                   Toke_Segno, Toke_Coda, Toke_BlockRef, Toke_OnBeat, Toke_Portamento,
                   Toke_PedalDown, Toke_DalSegno, Toke_Newline, Toke_String, Toke_Crotchets,
                   Toke_Carrot, Toke_Meter, Toke_DynForte, Toke_Eighths, Toke_Symbol,
                   Toke_Quarters, Toke_DaCapo, Toke_Choard, Toke_DynSFZ, Toke_PedalUp,
                   Toke_LWing, Toke_Volta, Toke_Int, Toke_Slur, Toke_Comment,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynPiano, Toke_NamedNoat, Toke_OttavaA,
                   Toke_CondS, Toke_Slash, Toke_Fine, Toke_ListS]);

        // optional_soak
        desirables.put('optional_soak -> Soak', [Toke_Soak]);

        // coda
        desirables.put('coda -> Coda optional_al_coda', [Toke_Coda]);

        // skoar
        desirables.put('skoar -> branches', [Toke_EOF, Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_Float, Toke_Tuplet,
                   Toke_Bars, Toke_OttavaB, Toke_Rep, Toke_DynFP, Toke_Quavers,
                   Toke_Loco, Toke_Segno, Toke_Coda, Toke_BlockRef, Toke_OnBeat,
                   Toke_Portamento, Toke_PedalDown, Toke_DalSegno, Toke_Newline, Toke_String,
                   Toke_Crotchets, Toke_Carrot, Toke_BlockSep, Toke_Meter, Toke_DynForte,
                   Toke_Eighths, Toke_Symbol, Toke_Quarters, Toke_DaCapo, Toke_Choard,
                   Toke_DynSFZ, Toke_PedalUp, Toke_LWing, Toke_Volta, Toke_Int,
                   Toke_Slur, Toke_Comment, Toke_Caesura, Toke_OctaveShift, Toke_DynPiano,
                   Toke_Voice, Toke_NamedNoat, Toke_OttavaA, Toke_CondS, Toke_Slash,
                   Toke_Fine, Toke_ListS]);

        // nouny
        desirables.put('nouny -> cthulhu', [Toke_LWing]);
        desirables.put('nouny -> conditional', [Toke_CondS]);
        desirables.put('nouny -> nouny_literal', [Toke_Float, Toke_Tuplet, Toke_String, Toke_Choard, Toke_Int,
                   Toke_Slur, Toke_NamedNoat, Toke_Symbol, Toke_BlockRef, Toke_OnBeat,
                   Toke_Caesura]);
        desirables.put('nouny -> musical_keyword', [Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_DynSFZ, Toke_DynPiano, Toke_PedalUp,
                   Toke_OctaveShift, Toke_OttavaB, Toke_Rep, Toke_Carrot, Toke_DynForte,
                   Toke_DynFP, Toke_Loco, Toke_OttavaA, Toke_Portamento, Toke_PedalDown]);
        desirables.put('nouny -> listy', [Toke_ListS]);

        // block_lines
        desirables.put('block_lines -> block_line block_lines', [Toke_QuindicesimaA, Toke_QuindicesimaB, Toke_Float, Toke_Tuplet, Toke_Bars,
                   Toke_OttavaB, Toke_Rep, Toke_DynFP, Toke_Quavers, Toke_Loco,
                   Toke_Segno, Toke_Coda, Toke_BlockRef, Toke_OnBeat, Toke_Portamento,
                   Toke_PedalDown, Toke_DalSegno, Toke_Newline, Toke_String, Toke_Crotchets,
                   Toke_Carrot, Toke_Meter, Toke_DynForte, Toke_Eighths, Toke_Symbol,
                   Toke_Quarters, Toke_DaCapo, Toke_Choard, Toke_DynSFZ, Toke_PedalUp,
                   Toke_LWing, Toke_Volta, Toke_Int, Toke_Slur, Toke_Comment,
                   Toke_Caesura, Toke_OctaveShift, Toke_DynPiano, Toke_NamedNoat, Toke_OttavaA,
                   Toke_CondS, Toke_Slash, Toke_Fine, Toke_ListS]);
    }

    listy_entries {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['listy_entries -> skoaroid moar_listy_entries'];
        // listy_entries -> skoaroid moar_listy_entries
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.skoaroid(noad));
            this.moar_listy_entries(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_al_coda {
        | parent |

        var noad = SkoarNoad.new("optional_al_coda", nil, parent);
        var desires = nil;

        desires = desirables['optional_al_coda -> AlCoda'];
        // optional_al_coda -> AlCoda
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_AlCoda", toker.burn(Toke_AlCoda));
            ^noad;
        };

        // <e>
        ^noad;
    }

    block {
        | parent |

        var noad = SkoarNoad.new("block", nil, parent);
        var desires = nil;

        desires = desirables['block -> BlockSep BlockName BlockSep block_lines BlockSep'];
        // block -> BlockSep BlockName BlockSep block_lines BlockSep
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_BlockSep", toker.burn(Toke_BlockSep));
            noad.add_toke("Toke_BlockName", toker.burn(Toke_BlockName));
            noad.add_toke("Toke_BlockSep", toker.burn(Toke_BlockSep));
            this.block_lines(noad);
            noad.add_toke("Toke_BlockSep", toker.burn(Toke_BlockSep));
            ^noad;
        };

        // Error State
        this.fail;
    }

    assignment {
        | parent |

        var noad = SkoarNoad.new("assignment", nil, parent);
        var desires = nil;

        desires = desirables['assignment -> AssOp settable'];
        // assignment -> AssOp settable
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_AssOp", toker.burn(Toke_AssOp));
            this.settable(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    skoaroid_prime {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['skoaroid_prime -> assignment skoaroid_prime'];
        // skoaroid_prime -> assignment skoaroid_prime
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.assignment(noad));
            this.skoaroid_prime(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    beat {
        | parent |

        var noad = SkoarNoad.new("beat", nil, parent);
        var desires = nil;

        desires = desirables['beat -> Crotchets'];
        // beat -> Crotchets
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Crotchets", toker.burn(Toke_Crotchets));
            ^noad;
        };

        desires = desirables['beat -> Quavers'];
        // beat -> Quavers
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Quavers", toker.burn(Toke_Quavers));
            ^noad;
        };

        desires = desirables['beat -> Quarters'];
        // beat -> Quarters
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Quarters", toker.burn(Toke_Quarters));
            ^noad;
        };

        desires = desirables['beat -> Eighths'];
        // beat -> Eighths
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Eighths", toker.burn(Toke_Eighths));
            ^noad;
        };

        desires = desirables['beat -> Slash'];
        // beat -> Slash
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Slash", toker.burn(Toke_Slash));
            ^noad;
        };

        // Error State
        this.fail;
    }

    msg {
        | parent |

        var noad = SkoarNoad.new("msg", nil, parent);
        var desires = nil;

        desires = desirables['msg -> MsgNameWithArgs listy_suffix'];
        // msg -> MsgNameWithArgs listy_suffix
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_MsgNameWithArgs", toker.burn(Toke_MsgNameWithArgs));
            this.listy_suffix(noad);
            ^noad;
        };

        desires = desirables['msg -> MsgName'];
        // msg -> MsgName
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_MsgName", toker.burn(Toke_MsgName));
            ^noad;
        };

        desires = desirables['msg -> listy'];
        // msg -> listy
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.listy(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    listy_suffix {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['listy_suffix -> listy_entries ListE'];
        // listy_suffix -> listy_entries ListE
        if (toker.sees(desires) != nil) {
            this.listy_entries(noad);
            noad.add_toke("Toke_ListE", toker.burn(Toke_ListE));
            ^noad;
        };

        // Error State
        this.fail;
    }

    boolean {
        | parent |

        var noad = SkoarNoad.new("boolean", nil, parent);
        var desires = nil;

        desires = desirables['boolean -> skoaroid BooleanOp skoaroid'];
        // boolean -> skoaroid BooleanOp skoaroid
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.skoaroid(noad));
            noad.add_toke("Toke_BooleanOp", toker.burn(Toke_BooleanOp));
            noad.add_noad(this.skoaroid(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_voice {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['optional_voice -> Voice'];
        // optional_voice -> Voice
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Voice", toker.burn(Toke_Voice));
            ^noad;
        };

        // <e>
        ^noad;
    }

    stmt {
        | parent |

        var noad = SkoarNoad.new("stmt", nil, parent);
        var desires = nil;

        desires = desirables['stmt -> skoaroid msg_chain_node'];
        // stmt -> skoaroid msg_chain_node
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.skoaroid(noad));
            noad.add_noad(this.msg_chain_node(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_stmt {
        | parent |

        var noad = SkoarNoad.new("optional_stmt", nil, parent);
        var desires = nil;

        desires = desirables['optional_stmt -> stmt'];
        // optional_stmt -> stmt
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.stmt(noad));
            ^noad;
        };

        desires = desirables['optional_stmt -> Newline'];
        // optional_stmt -> Newline
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Newline", toker.burn(Toke_Newline));
            ^noad;
        };

        // <e>
        ^noad;
    }

    skoaroid {
        | parent |

        var noad = SkoarNoad.new("skoaroid", nil, parent);
        var desires = nil;

        desires = desirables['skoaroid -> nouny skoaroid_prime'];
        // skoaroid -> nouny skoaroid_prime
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.nouny(noad));
            this.skoaroid_prime(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    marker {
        | parent |

        var noad = SkoarNoad.new("marker", nil, parent);
        var desires = nil;

        desires = desirables['marker -> Segno'];
        // marker -> Segno
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Segno", toker.burn(Toke_Segno));
            ^noad;
        };

        desires = desirables['marker -> Fine'];
        // marker -> Fine
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Fine", toker.burn(Toke_Fine));
            ^noad;
        };

        desires = desirables['marker -> coda'];
        // marker -> coda
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.coda(noad));
            ^noad;
        };

        desires = desirables['marker -> Volta'];
        // marker -> Volta
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Volta", toker.burn(Toke_Volta));
            ^noad;
        };

        desires = desirables['marker -> Bars'];
        // marker -> Bars
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Bars", toker.burn(Toke_Bars));
            ^noad;
        };

        // Error State
        this.fail;
    }

    moar_listy_entries {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['moar_listy_entries -> ListSep listy_entries'];
        // moar_listy_entries -> ListSep listy_entries
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_ListSep", toker.burn(Toke_ListSep));
            this.listy_entries(noad);
            ^noad;
        };

        desires = desirables['moar_listy_entries -> Newline'];
        // moar_listy_entries -> Newline
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Newline", toker.burn(Toke_Newline));
            ^noad;
        };

        // <e>
        ^noad;
    }

    branches {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['branches -> branch branches'];
        // branches -> branch branches
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.branch(noad));
            this.branches(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    listy {
        | parent |

        var noad = SkoarNoad.new("listy", nil, parent);
        var desires = nil;

        desires = desirables['listy -> ListS listy_suffix'];
        // listy -> ListS listy_suffix
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_ListS", toker.burn(Toke_ListS));
            this.listy_suffix(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    nouny_literal {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['nouny_literal -> Tuplet'];
        // nouny_literal -> Tuplet
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Tuplet", toker.burn(Toke_Tuplet));
            ^noad;
        };

        desires = desirables['nouny_literal -> Caesura'];
        // nouny_literal -> Caesura
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Caesura", toker.burn(Toke_Caesura));
            ^noad;
        };

        desires = desirables['nouny_literal -> Slur'];
        // nouny_literal -> Slur
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Slur", toker.burn(Toke_Slur));
            ^noad;
        };

        desires = desirables['nouny_literal -> Int'];
        // nouny_literal -> Int
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Int", toker.burn(Toke_Int));
            ^noad;
        };

        desires = desirables['nouny_literal -> Float'];
        // nouny_literal -> Float
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Float", toker.burn(Toke_Float));
            ^noad;
        };

        desires = desirables['nouny_literal -> String'];
        // nouny_literal -> String
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_String", toker.burn(Toke_String));
            ^noad;
        };

        desires = desirables['nouny_literal -> BlockRef'];
        // nouny_literal -> BlockRef
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_BlockRef", toker.burn(Toke_BlockRef));
            ^noad;
        };

        desires = desirables['nouny_literal -> Choard'];
        // nouny_literal -> Choard
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Choard", toker.burn(Toke_Choard));
            ^noad;
        };

        desires = desirables['nouny_literal -> NamedNoat'];
        // nouny_literal -> NamedNoat
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_NamedNoat", toker.burn(Toke_NamedNoat));
            ^noad;
        };

        desires = desirables['nouny_literal -> Symbol'];
        // nouny_literal -> Symbol
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Symbol", toker.burn(Toke_Symbol));
            ^noad;
        };

        desires = desirables['nouny_literal -> OnBeat'];
        // nouny_literal -> OnBeat
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_OnBeat", toker.burn(Toke_OnBeat));
            ^noad;
        };

        // Error State
        this.fail;
    }

    dynamic {
        | parent |

        var noad = SkoarNoad.new("dynamic", nil, parent);
        var desires = nil;

        desires = desirables['dynamic -> DynPiano'];
        // dynamic -> DynPiano
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_DynPiano", toker.burn(Toke_DynPiano));
            ^noad;
        };

        desires = desirables['dynamic -> DynForte'];
        // dynamic -> DynForte
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_DynForte", toker.burn(Toke_DynForte));
            ^noad;
        };

        desires = desirables['dynamic -> DynSFZ'];
        // dynamic -> DynSFZ
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_DynSFZ", toker.burn(Toke_DynSFZ));
            ^noad;
        };

        desires = desirables['dynamic -> DynFP'];
        // dynamic -> DynFP
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_DynFP", toker.burn(Toke_DynFP));
            ^noad;
        };

        // Error State
        this.fail;
    }

    cthulhu {
        | parent |

        var noad = SkoarNoad.new("cthulhu", nil, parent);
        var desires = nil;

        desires = desirables['cthulhu -> LWing CondSep cthulhu_prime'];
        // cthulhu -> LWing CondSep cthulhu_prime
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_LWing", toker.burn(Toke_LWing));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep));
            this.cthulhu_prime(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    phrases {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['phrases -> phrasey phrases'];
        // phrases -> phrasey phrases
        if (toker.sees(desires) != nil) {
            this.phrasey(noad);
            this.phrases(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    musical_keyword_misc {
        | parent |

        var noad = SkoarNoad.new("musical_keyword_misc", nil, parent);
        var desires = nil;

        desires = desirables['musical_keyword_misc -> Rep'];
        // musical_keyword_misc -> Rep
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Rep", toker.burn(Toke_Rep));
            ^noad;
        };

        desires = desirables['musical_keyword_misc -> Portamento'];
        // musical_keyword_misc -> Portamento
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Portamento", toker.burn(Toke_Portamento));
            ^noad;
        };

        desires = desirables['musical_keyword_misc -> Carrot'];
        // musical_keyword_misc -> Carrot
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Carrot", toker.burn(Toke_Carrot));
            ^noad;
        };

        // Error State
        this.fail;
    }

    cthulhu_prime {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['cthulhu_prime -> boolean CondSep RWing'];
        // cthulhu_prime -> boolean CondSep RWing
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.boolean(noad));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep));
            noad.add_toke("Toke_RWing", toker.burn(Toke_RWing));
            ^noad;
        };

        desires = desirables['cthulhu_prime -> Nosey CondSep RWing'];
        // cthulhu_prime -> Nosey CondSep RWing
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Nosey", toker.burn(Toke_Nosey));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep));
            noad.add_toke("Toke_RWing", toker.burn(Toke_RWing));
            ^noad;
        };

        // Error State
        this.fail;
    }

    pedally {
        | parent |

        var noad = SkoarNoad.new("pedally", nil, parent);
        var desires = nil;

        desires = desirables['pedally -> PedalDown'];
        // pedally -> PedalDown
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_PedalDown", toker.burn(Toke_PedalDown));
            ^noad;
        };

        desires = desirables['pedally -> PedalUp'];
        // pedally -> PedalUp
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_PedalUp", toker.burn(Toke_PedalUp));
            ^noad;
        };

        // Error State
        this.fail;
    }

    settable {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['settable -> Caesura'];
        // settable -> Caesura
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Caesura", toker.burn(Toke_Caesura));
            ^noad;
        };

        desires = desirables['settable -> OnBeat'];
        // settable -> OnBeat
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_OnBeat", toker.burn(Toke_OnBeat));
            ^noad;
        };

        desires = desirables['settable -> Symbol'];
        // settable -> Symbol
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Symbol", toker.burn(Toke_Symbol));
            ^noad;
        };

        desires = desirables['settable -> listy'];
        // settable -> listy
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.listy(noad));
            ^noad;
        };

        desires = desirables['settable -> Quarters'];
        // settable -> Quarters
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Quarters", toker.burn(Toke_Quarters));
            ^noad;
        };

        desires = desirables['settable -> Eighths'];
        // settable -> Eighths
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Eighths", toker.burn(Toke_Eighths));
            ^noad;
        };

        // Error State
        this.fail;
    }

    al_x {
        | parent |

        var noad = SkoarNoad.new("al_x", nil, parent);
        var desires = nil;

        desires = desirables['al_x -> AlCoda'];
        // al_x -> AlCoda
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_AlCoda", toker.burn(Toke_AlCoda));
            ^noad;
        };

        desires = desirables['al_x -> AlSegno'];
        // al_x -> AlSegno
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_AlSegno", toker.burn(Toke_AlSegno));
            ^noad;
        };

        desires = desirables['al_x -> AlFine'];
        // al_x -> AlFine
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_AlFine", toker.burn(Toke_AlFine));
            ^noad;
        };

        // <e>
        ^noad;
    }

    musical_keyword {
        | parent |

        var noad = SkoarNoad.new("musical_keyword", nil, parent);
        var desires = nil;

        desires = desirables['musical_keyword -> dynamic'];
        // musical_keyword -> dynamic
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.dynamic(noad));
            ^noad;
        };

        desires = desirables['musical_keyword -> ottavas'];
        // musical_keyword -> ottavas
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.ottavas(noad));
            ^noad;
        };

        desires = desirables['musical_keyword -> pedally'];
        // musical_keyword -> pedally
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.pedally(noad));
            ^noad;
        };

        desires = desirables['musical_keyword -> musical_keyword_misc'];
        // musical_keyword -> musical_keyword_misc
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.musical_keyword_misc(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    conditional {
        | parent |

        var noad = SkoarNoad.new("conditional", nil, parent);
        var desires = nil;

        desires = desirables['conditional -> CondS optional_stmt CondSep boolean CondSep optional_stmt CondE'];
        // conditional -> CondS optional_stmt CondSep boolean CondSep optional_stmt CondE
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_CondS", toker.burn(Toke_CondS));
            noad.add_noad(this.optional_stmt(noad));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep));
            noad.add_noad(this.boolean(noad));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep));
            noad.add_noad(this.optional_stmt(noad));
            noad.add_toke("Toke_CondE", toker.burn(Toke_CondE));
            ^noad;
        };

        // Error State
        this.fail;
    }

    branch {
        | parent |

        var noad = SkoarNoad.new("branch", nil, parent);
        var desires = nil;

        desires = desirables['branch -> optional_voice phrases Newline'];
        // branch -> optional_voice phrases Newline
        if (toker.sees(desires) != nil) {
            this.optional_voice(noad);
            this.phrases(noad);
            noad.add_toke("Toke_Newline", toker.burn(Toke_Newline));
            ^noad;
        };

        desires = desirables['branch -> block Newline'];
        // branch -> block Newline
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.block(noad));
            noad.add_toke("Toke_Newline", toker.burn(Toke_Newline));
            ^noad;
        };

        // Error State
        this.fail;
    }

    dal_goto {
        | parent |

        var noad = SkoarNoad.new("dal_goto", nil, parent);
        var desires = nil;

        desires = desirables['dal_goto -> DaCapo al_x'];
        // dal_goto -> DaCapo al_x
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_DaCapo", toker.burn(Toke_DaCapo));
            noad.add_noad(this.al_x(noad));
            ^noad;
        };

        desires = desirables['dal_goto -> DalSegno al_x'];
        // dal_goto -> DalSegno al_x
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_DalSegno", toker.burn(Toke_DalSegno));
            noad.add_noad(this.al_x(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    msg_chain_node {
        | parent |

        var noad = SkoarNoad.new("msg_chain_node", nil, parent);
        var desires = nil;

        desires = desirables['msg_chain_node -> optional_soak MsgOp msg msg_chain_node'];
        // msg_chain_node -> optional_soak MsgOp msg msg_chain_node
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.optional_soak(noad));
            noad.add_toke("Toke_MsgOp", toker.burn(Toke_MsgOp));
            noad.add_noad(this.msg(noad));
            noad.add_noad(this.msg_chain_node(noad));
            ^noad;
        };

        // <e>
        ^noad;
    }

    phrasey {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['phrasey -> Comment'];
        // phrasey -> Comment
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Comment", toker.burn(Toke_Comment));
            ^noad;
        };

        desires = desirables['phrasey -> marker'];
        // phrasey -> marker
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.marker(noad));
            ^noad;
        };

        desires = desirables['phrasey -> Meter'];
        // phrasey -> Meter
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Meter", toker.burn(Toke_Meter));
            ^noad;
        };

        desires = desirables['phrasey -> skoaroid'];
        // phrasey -> skoaroid
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.skoaroid(noad));
            ^noad;
        };

        desires = desirables['phrasey -> dal_goto'];
        // phrasey -> dal_goto
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.dal_goto(noad));
            ^noad;
        };

        desires = desirables['phrasey -> beat'];
        // phrasey -> beat
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.beat(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    ottavas {
        | parent |

        var noad = SkoarNoad.new("ottavas", nil, parent);
        var desires = nil;

        desires = desirables['ottavas -> OctaveShift'];
        // ottavas -> OctaveShift
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_OctaveShift", toker.burn(Toke_OctaveShift));
            ^noad;
        };

        desires = desirables['ottavas -> OttavaA'];
        // ottavas -> OttavaA
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_OttavaA", toker.burn(Toke_OttavaA));
            ^noad;
        };

        desires = desirables['ottavas -> OttavaB'];
        // ottavas -> OttavaB
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_OttavaB", toker.burn(Toke_OttavaB));
            ^noad;
        };

        desires = desirables['ottavas -> QuindicesimaA'];
        // ottavas -> QuindicesimaA
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_QuindicesimaA", toker.burn(Toke_QuindicesimaA));
            ^noad;
        };

        desires = desirables['ottavas -> QuindicesimaB'];
        // ottavas -> QuindicesimaB
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_QuindicesimaB", toker.burn(Toke_QuindicesimaB));
            ^noad;
        };

        desires = desirables['ottavas -> Loco'];
        // ottavas -> Loco
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Loco", toker.burn(Toke_Loco));
            ^noad;
        };

        // Error State
        this.fail;
    }

    block_line {
        | parent |

        var noad = SkoarNoad.new("block_line", nil, parent);
        var desires = nil;

        desires = desirables['block_line -> phrases Newline'];
        // block_line -> phrases Newline
        if (toker.sees(desires) != nil) {
            this.phrases(noad);
            noad.add_toke("Toke_Newline", toker.burn(Toke_Newline));
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_soak {
        | parent |

        var noad = SkoarNoad.new("optional_soak", nil, parent);
        var desires = nil;

        desires = desirables['optional_soak -> Soak'];
        // optional_soak -> Soak
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Soak", toker.burn(Toke_Soak));
            ^noad;
        };

        // <e>
        ^noad;
    }

    coda {
        | parent |

        var noad = SkoarNoad.new("coda", nil, parent);
        var desires = nil;

        desires = desirables['coda -> Coda optional_al_coda'];
        // coda -> Coda optional_al_coda
        if (toker.sees(desires) != nil) {
            noad.add_toke("Toke_Coda", toker.burn(Toke_Coda));
            noad.add_noad(this.optional_al_coda(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    skoar {
        | parent |

        var noad = SkoarNoad.new("skoar", nil, parent);
        var desires = nil;

        desires = desirables['skoar -> branches'];
        // skoar -> branches
        if (toker.sees(desires) != nil) {
            this.branches(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    nouny {
        | parent |

        var noad = SkoarNoad.new("nouny", nil, parent);
        var desires = nil;

        desires = desirables['nouny -> cthulhu'];
        // nouny -> cthulhu
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.cthulhu(noad));
            ^noad;
        };

        desires = desirables['nouny -> conditional'];
        // nouny -> conditional
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.conditional(noad));
            ^noad;
        };

        desires = desirables['nouny -> nouny_literal'];
        // nouny -> nouny_literal
        if (toker.sees(desires) != nil) {
            this.nouny_literal(noad);
            ^noad;
        };

        desires = desirables['nouny -> musical_keyword'];
        // nouny -> musical_keyword
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.musical_keyword(noad));
            ^noad;
        };

        desires = desirables['nouny -> listy'];
        // nouny -> listy
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.listy(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    block_lines {
        | parent |

        var noad = parent;
        var desires = nil;

        desires = desirables['block_lines -> block_line block_lines'];
        // block_lines -> block_line block_lines
        if (toker.sees(desires) != nil) {
            noad.add_noad(this.block_line(noad));
            this.block_lines(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

}

