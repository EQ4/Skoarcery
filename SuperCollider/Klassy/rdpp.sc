// ==================================================================================================================================
// rdpp.sc.sc - Generated by Code_Parser_Sc - Create Recursive Descent Predictive Parser on 2014-05-11 11:05:38 for SuperCollider 3.6
// ==================================================================================================================================

SkoarParseException : Exception {

}

SkoarParser {

    var <runtime, <toker, <tab;

    *new {
        | runtime |
        ^super.new.init( runtime )
    }

    init {
        | runtime |

        runtime = runtime;
        toker = runtime.toker;
        tab = 0;
    }

    fail {
        toker.dump;
        SkoarParseException("Fail").throw;
    }

    //print {
    //    | line, end |
    //    (line ++ end).postln;
    //}

    nouny {
        | parent |

        var noad = SkoarNoad.new("nouny", nil, parent);
        var desires = nil;

        // nouny -> cthulhu
        desires = [Toke_LWing.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.cthulhu(noad));
            ^noad;
        };

        // nouny -> noaty
        desires = [Toke_Choard.class, Toke_Symbol.class, Toke_VectorNoat.class, Toke_CurNoat.class, Toke_ListS.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.noaty(noad));
            ^noad;
        };

        // nouny -> conditional
        desires = [Toke_CondS.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.conditional(noad));
            ^noad;
        };

        // nouny -> nouny_literal
        desires = [Toke_Tuplet.class, Toke_String.class, Toke_Slur.class, Toke_Float.class, Toke_Caesura.class,
                   Toke_Int.class];
        if (toker.sees(desires)) {
            this.nouny_literal(noad);
            ^noad;
        };

        // nouny -> accidentally
        desires = [Toke_AccSharp.class, Toke_AccNatural.class, Toke_AccFlat.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.accidentally(noad));
            ^noad;
        };

        // nouny -> musical_keyword
        desires = [Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class, Toke_PedalUp.class,
                   Toke_QuindicesimaA.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_OttavaA.class, Toke_DynPiano.class,
                   Toke_PedalDown.class, Toke_OttavaB.class, Toke_Rep.class, Toke_DynSFZ.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.musical_keyword(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    meter_stmts {
        | parent |

        var noad = parent;
        var desires = nil;

        // meter_stmts -> meter_stmt meter_stmts
        desires = [Toke_Carrots.class, Toke_BassClef.class, Toke_TrebleClef.class, Toke_Symbol.class, Toke_AltoClef.class,
                   Toke_Int.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meter_stmt(noad));
            this.meter_stmts(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    msg {
        | parent |

        var noad = SkoarNoad.new("msg", nil, parent);
        var desires = nil;

        // msg -> MsgNameWithArgs listy_suffix
        desires = [Toke_MsgNameWithArgs.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_MsgNameWithArgs", toker.burn(Toke_MsgNameWithArgs.class));
            this.listy_suffix(noad);
            ^noad;
        };

        // msg -> MsgName
        desires = [Toke_MsgName.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_MsgName", toker.burn(Toke_MsgName.class));
            ^noad;
        };

        // msg -> listy
        desires = [Toke_ListS.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.listy(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    msg_chain_node {
        | parent |

        var noad = SkoarNoad.new("msg_chain_node", nil, parent);
        var desires = nil;

        // msg_chain_node -> optional_soak MsgOp msg msg_chain_node
        desires = [Toke_Soak.class, Toke_MsgOp.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.optional_soak(noad));
            noad.add_toke("Toke_MsgOp", toker.burn(Toke_MsgOp.class));
            noad.add_noad(this.msg(noad));
            noad.add_noad(this.msg_chain_node(noad));
            ^noad;
        };

        // <e>
        ^noad;
    }

    marker {
        | parent |

        var noad = SkoarNoad.new("marker", nil, parent);
        var desires = nil;

        // marker -> Segno
        desires = [Toke_Segno.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Segno", toker.burn(Toke_Segno.class));
            ^noad;
        };

        // marker -> Fine
        desires = [Toke_Fine.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Fine", toker.burn(Toke_Fine.class));
            ^noad;
        };

        // marker -> coda
        desires = [Toke_Coda.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.coda(noad));
            ^noad;
        };

        // marker -> Volta
        desires = [Toke_Volta.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Volta", toker.burn(Toke_Volta.class));
            ^noad;
        };

        // marker -> Bars
        desires = [Toke_Bars.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Bars", toker.burn(Toke_Bars.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    meter_stmt_numbery {
        | parent |

        var noad = parent;
        var desires = nil;

        // meter_stmt_numbery -> meter_ass
        desires = [Toke_AssOp.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meter_ass(noad));
            ^noad;
        };

        // meter_stmt_numbery -> meter_sig_prime
        desires = [Toke_Slash.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meter_sig_prime(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    skoaroid {
        | parent |

        var noad = SkoarNoad.new("skoaroid", nil, parent);
        var desires = nil;

        // skoaroid -> nouny skoaroid_prime
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.nouny(noad));
            this.skoaroid_prime(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    skoaroid_prime {
        | parent |

        var noad = parent;
        var desires = nil;

        // skoaroid_prime -> assignment skoaroid_prime
        desires = [Toke_AssOp.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.assignment(noad));
            this.skoaroid_prime(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    phrases {
        | parent |

        var noad = parent;
        var desires = nil;

        // phrases -> phrasey phrases
        desires = [Toke_Tuplet.class, Toke_Comment.class, Toke_Bars.class, Toke_Float.class, Toke_LWing.class,
                   Toke_QuindicesimaA.class, Toke_DaCapo.class, Toke_OttavaA.class, Toke_Slur.class, Toke_ListS.class,
                   Toke_Symbol.class, Toke_Eighths.class, Toke_CurNoat.class, Toke_AccSharp.class, Toke_Coda.class,
                   Toke_VectorNoat.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_AccNatural.class, Toke_DynPiano.class,
                   Toke_AccFlat.class, Toke_OttavaB.class, Toke_Quavers.class, Toke_Slash.class, Toke_Fine.class,
                   Toke_Quarters.class, Toke_CondS.class, Toke_Crotchets.class, Toke_Caesura.class, Toke_Choard.class,
                   Toke_PedalDown.class, Toke_Volta.class, Toke_Rep.class, Toke_MeterS.class, Toke_Segno.class,
                   Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class, Toke_PedalUp.class,
                   Toke_DalSegno.class, Toke_Int.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            this.phrasey(noad);
            this.phrases(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    meter_stmt {
        | parent |

        var noad = SkoarNoad.new("meter_stmt", nil, parent);
        var desires = nil;

        // meter_stmt -> Int meter_stmt_numbery
        desires = [Toke_Int.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Int", toker.burn(Toke_Int.class));
            this.meter_stmt_numbery(noad);
            ^noad;
        };

        // meter_stmt -> meteroid
        desires = [Toke_BassClef.class, Toke_TrebleClef.class, Toke_Carrots.class, Toke_AltoClef.class, Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meteroid(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    assignment {
        | parent |

        var noad = SkoarNoad.new("assignment", nil, parent);
        var desires = nil;

        // assignment -> AssOp settable
        desires = [Toke_AssOp.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AssOp", toker.burn(Toke_AssOp.class));
            noad.add_noad(this.settable(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    acc {
        | parent |

        var noad = SkoarNoad.new("acc", nil, parent);
        var desires = nil;

        // acc -> AccSharp
        desires = [Toke_AccSharp.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AccSharp", toker.burn(Toke_AccSharp.class));
            ^noad;
        };

        // acc -> AccNatural
        desires = [Toke_AccNatural.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AccNatural", toker.burn(Toke_AccNatural.class));
            ^noad;
        };

        // acc -> AccFlat
        desires = [Toke_AccFlat.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AccFlat", toker.burn(Toke_AccFlat.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    moar_listy_entries {
        | parent |

        var noad = parent;
        var desires = nil;

        // moar_listy_entries -> ListSep listy_entries
        desires = [Toke_ListSep.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_ListSep", toker.burn(Toke_ListSep.class));
            this.listy_entries(noad);
            ^noad;
        };

        // <e>
        ^noad;
    }

    phrasey {
        | parent |

        var noad = parent;
        var desires = nil;

        // phrasey -> Comment
        desires = [Toke_Comment.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Comment", toker.burn(Toke_Comment.class));
            ^noad;
        };

        // phrasey -> marker
        desires = [Toke_Fine.class, Toke_Bars.class, Toke_Segno.class, Toke_Coda.class, Toke_Volta.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.marker(noad));
            ^noad;
        };

        // phrasey -> meter
        desires = [Toke_MeterS.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meter(noad));
            ^noad;
        };

        // phrasey -> skoaroid
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.skoaroid(noad));
            ^noad;
        };

        // phrasey -> dal_goto
        desires = [Toke_DaCapo.class, Toke_DalSegno.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.dal_goto(noad));
            ^noad;
        };

        // phrasey -> beat
        desires = [Toke_Crotchets.class, Toke_Quavers.class, Toke_Eighths.class, Toke_Slash.class, Toke_Quarters.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.beat(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    conditional {
        | parent |

        var noad = SkoarNoad.new("conditional", nil, parent);
        var desires = nil;

        // conditional -> CondS optional_stmt CondSep boolean CondSep optional_stmt CondE
        desires = [Toke_CondS.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_CondS", toker.burn(Toke_CondS.class));
            noad.add_noad(this.optional_stmt(noad));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep.class));
            noad.add_noad(this.boolean(noad));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep.class));
            noad.add_noad(this.optional_stmt(noad));
            noad.add_toke("Toke_CondE", toker.burn(Toke_CondE.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    dynamic {
        | parent |

        var noad = SkoarNoad.new("dynamic", nil, parent);
        var desires = nil;

        // dynamic -> DynPiano
        desires = [Toke_DynPiano.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DynPiano", toker.burn(Toke_DynPiano.class));
            ^noad;
        };

        // dynamic -> DynForte
        desires = [Toke_DynForte.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DynForte", toker.burn(Toke_DynForte.class));
            ^noad;
        };

        // dynamic -> DynSFZ
        desires = [Toke_DynSFZ.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DynSFZ", toker.burn(Toke_DynSFZ.class));
            ^noad;
        };

        // dynamic -> DynFP
        desires = [Toke_DynFP.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DynFP", toker.burn(Toke_DynFP.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    musical_keyword {
        | parent |

        var noad = SkoarNoad.new("musical_keyword", nil, parent);
        var desires = nil;

        // musical_keyword -> dynamic
        desires = [Toke_DynFP.class, Toke_DynPiano.class, Toke_DynSFZ.class, Toke_DynForte.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.dynamic(noad));
            ^noad;
        };

        // musical_keyword -> ottavas
        desires = [Toke_OttavaA.class, Toke_OttavaB.class, Toke_QuindicesimaA.class, Toke_QuindicesimaB.class, Toke_Loco.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.ottavas(noad));
            ^noad;
        };

        // musical_keyword -> pedally
        desires = [Toke_PedalUp.class, Toke_PedalDown.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.pedally(noad));
            ^noad;
        };

        // musical_keyword -> musical_keyword_misc
        desires = [Toke_Portamento.class, Toke_Rep.class, Toke_DubRep.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.musical_keyword_misc(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_stmt {
        | parent |

        var noad = SkoarNoad.new("optional_stmt", nil, parent);
        var desires = nil;

        // optional_stmt -> stmt
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_Carrots.class, Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class,
                   Toke_DynFP.class, Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class,
                   Toke_AccNatural.class, Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class,
                   Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.stmt(noad));
            ^noad;
        };

        // <e>
        ^noad;
    }

    meter_sig_prime {
        | parent |

        var noad = SkoarNoad.new("meter_sig_prime", nil, parent);
        var desires = nil;

        // meter_sig_prime -> Slash Int
        desires = [Toke_Slash.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Slash", toker.burn(Toke_Slash.class));
            noad.add_toke("Toke_Int", toker.burn(Toke_Int.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    musical_keyword_misc {
        | parent |

        var noad = SkoarNoad.new("musical_keyword_misc", nil, parent);
        var desires = nil;

        // musical_keyword_misc -> Rep
        desires = [Toke_Rep.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Rep", toker.burn(Toke_Rep.class));
            ^noad;
        };

        // musical_keyword_misc -> DubRep
        desires = [Toke_DubRep.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DubRep", toker.burn(Toke_DubRep.class));
            ^noad;
        };

        // musical_keyword_misc -> Portamento
        desires = [Toke_Portamento.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Portamento", toker.burn(Toke_Portamento.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    listy_suffix {
        | parent |

        var noad = parent;
        var desires = nil;

        // listy_suffix -> listy_entries ListE
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            this.listy_entries(noad);
            noad.add_toke("Toke_ListE", toker.burn(Toke_ListE.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    noat_literal {
        | parent |

        var noad = SkoarNoad.new("noat_literal", nil, parent);
        var desires = nil;

        // noat_literal -> Choard
        desires = [Toke_Choard.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Choard", toker.burn(Toke_Choard.class));
            ^noad;
        };

        // noat_literal -> VectorNoat
        desires = [Toke_VectorNoat.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_VectorNoat", toker.burn(Toke_VectorNoat.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    stmt {
        | parent |

        var noad = SkoarNoad.new("stmt", nil, parent);
        var desires = nil;

        // stmt -> optional_carrots skoaroid msg_chain_node
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_Carrots.class, Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class,
                   Toke_DynFP.class, Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class,
                   Toke_AccNatural.class, Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class,
                   Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.optional_carrots(noad));
            noad.add_noad(this.skoaroid(noad));
            noad.add_noad(this.msg_chain_node(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    accidentally {
        | parent |

        var noad = SkoarNoad.new("accidentally", nil, parent);
        var desires = nil;

        // accidentally -> acc noaty
        desires = [Toke_AccSharp.class, Toke_AccNatural.class, Toke_AccFlat.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.acc(noad));
            noad.add_noad(this.noaty(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    cthulhu {
        | parent |

        var noad = SkoarNoad.new("cthulhu", nil, parent);
        var desires = nil;

        // cthulhu -> LWing CondSep cthulhu_prime
        desires = [Toke_LWing.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_LWing", toker.burn(Toke_LWing.class));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep.class));
            this.cthulhu_prime(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    coda {
        | parent |

        var noad = SkoarNoad.new("coda", nil, parent);
        var desires = nil;

        // coda -> Coda optional_al_coda
        desires = [Toke_Coda.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Coda", toker.burn(Toke_Coda.class));
            noad.add_noad(this.optional_al_coda(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    skoar {
        | parent |

        var noad = SkoarNoad.new("skoar", nil, parent);
        var desires = nil;

        // skoar -> phrases
        desires = [Toke_Tuplet.class, Toke_Comment.class, Toke_Bars.class, Toke_Float.class, Toke_LWing.class,
                   Toke_QuindicesimaA.class, Toke_DaCapo.class, Toke_OttavaA.class, Toke_Slur.class, Toke_ListS.class,
                   Toke_Symbol.class, Toke_EOF.class, Toke_Eighths.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_Coda.class, Toke_VectorNoat.class, Toke_Loco.class, Toke_QuindicesimaB.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_Quavers.class, Toke_Slash.class,
                   Toke_Fine.class, Toke_Quarters.class, Toke_CondS.class, Toke_Crotchets.class, Toke_Caesura.class,
                   Toke_Choard.class, Toke_PedalDown.class, Toke_Volta.class, Toke_Rep.class, Toke_MeterS.class,
                   Toke_Segno.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_DalSegno.class, Toke_Int.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            this.phrases(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    listy_entries {
        | parent |

        var noad = parent;
        var desires = nil;

        // listy_entries -> skoaroid moar_listy_entries
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.skoaroid(noad));
            this.moar_listy_entries(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    pedally {
        | parent |

        var noad = SkoarNoad.new("pedally", nil, parent);
        var desires = nil;

        // pedally -> PedalDown
        desires = [Toke_PedalDown.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_PedalDown", toker.burn(Toke_PedalDown.class));
            ^noad;
        };

        // pedally -> PedalUp
        desires = [Toke_PedalUp.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_PedalUp", toker.burn(Toke_PedalUp.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    meter_ass {
        | parent |

        var noad = SkoarNoad.new("meter_ass", nil, parent);
        var desires = nil;

        // meter_ass -> AssOp meter_ass_r
        desires = [Toke_AssOp.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AssOp", toker.burn(Toke_AssOp.class));
            this.meter_ass_r(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    meter {
        | parent |

        var noad = SkoarNoad.new("meter", nil, parent);
        var desires = nil;

        // meter -> MeterS meter_stmts MeterE
        desires = [Toke_MeterS.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_MeterS", toker.burn(Toke_MeterS.class));
            this.meter_stmts(noad);
            noad.add_toke("Toke_MeterE", toker.burn(Toke_MeterE.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    clef {
        | parent |

        var noad = SkoarNoad.new("clef", nil, parent);
        var desires = nil;

        // clef -> TrebleClef
        desires = [Toke_TrebleClef.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_TrebleClef", toker.burn(Toke_TrebleClef.class));
            ^noad;
        };

        // clef -> BassClef
        desires = [Toke_BassClef.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_BassClef", toker.burn(Toke_BassClef.class));
            ^noad;
        };

        // clef -> AltoClef
        desires = [Toke_AltoClef.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AltoClef", toker.burn(Toke_AltoClef.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    settable {
        | parent |

        var noad = SkoarNoad.new("settable", nil, parent);
        var desires = nil;

        // settable -> Caesura
        desires = [Toke_Caesura.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Caesura", toker.burn(Toke_Caesura.class));
            ^noad;
        };

        // settable -> CurNoat
        desires = [Toke_CurNoat.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_CurNoat", toker.burn(Toke_CurNoat.class));
            ^noad;
        };

        // settable -> Symbol
        desires = [Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Symbol", toker.burn(Toke_Symbol.class));
            ^noad;
        };

        // settable -> listy
        desires = [Toke_ListS.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.listy(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    beat {
        | parent |

        var noad = SkoarNoad.new("beat", nil, parent);
        var desires = nil;

        // beat -> Crotchets
        desires = [Toke_Crotchets.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Crotchets", toker.burn(Toke_Crotchets.class));
            ^noad;
        };

        // beat -> Quavers
        desires = [Toke_Quavers.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Quavers", toker.burn(Toke_Quavers.class));
            ^noad;
        };

        // beat -> Quarters
        desires = [Toke_Quarters.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Quarters", toker.burn(Toke_Quarters.class));
            ^noad;
        };

        // beat -> Eighths
        desires = [Toke_Eighths.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Eighths", toker.burn(Toke_Eighths.class));
            ^noad;
        };

        // beat -> Slash
        desires = [Toke_Slash.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Slash", toker.burn(Toke_Slash.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    meter_symbolic {
        | parent |

        var noad = SkoarNoad.new("meter_symbolic", nil, parent);
        var desires = nil;

        // meter_symbolic -> optional_carrots Symbol msg_chain_node
        desires = [Toke_Carrots.class, Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.optional_carrots(noad));
            noad.add_toke("Toke_Symbol", toker.burn(Toke_Symbol.class));
            noad.add_noad(this.msg_chain_node(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    al_whatnow {
        | parent |

        var noad = SkoarNoad.new("al_whatnow", nil, parent);
        var desires = nil;

        // al_whatnow -> AlCoda
        desires = [Toke_AlCoda.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AlCoda", toker.burn(Toke_AlCoda.class));
            ^noad;
        };

        // al_whatnow -> AlSegno
        desires = [Toke_AlSegno.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AlSegno", toker.burn(Toke_AlSegno.class));
            ^noad;
        };

        // al_whatnow -> AlFine
        desires = [Toke_AlFine.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AlFine", toker.burn(Toke_AlFine.class));
            ^noad;
        };

        // <e>
        ^noad;
    }

    meter_ass_r {
        | parent |

        var noad = parent;
        var desires = nil;

        // meter_ass_r -> Symbol
        desires = [Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Symbol", toker.burn(Toke_Symbol.class));
            ^noad;
        };

        // meter_ass_r -> meter_beat
        desires = [Toke_Crotchets.class, Toke_Quavers.class, Toke_Eighths.class, Toke_Slash.class, Toke_Quarters.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meter_beat(noad));
            ^noad;
        };

        // meter_ass_r -> dynamic
        desires = [Toke_DynFP.class, Toke_DynPiano.class, Toke_DynSFZ.class, Toke_DynForte.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.dynamic(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_soak {
        | parent |

        var noad = SkoarNoad.new("optional_soak", nil, parent);
        var desires = nil;

        // optional_soak -> Soak
        desires = [Toke_Soak.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Soak", toker.burn(Toke_Soak.class));
            ^noad;
        };

        // <e>
        ^noad;
    }

    noaty {
        | parent |

        var noad = SkoarNoad.new("noaty", nil, parent);
        var desires = nil;

        // noaty -> noat_literal
        desires = [Toke_Choard.class, Toke_VectorNoat.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.noat_literal(noad));
            ^noad;
        };

        // noaty -> noat_reference
        desires = [Toke_CurNoat.class, Toke_ListS.class, Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.noat_reference(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    meter_beat {
        | parent |

        var noad = SkoarNoad.new("meter_beat", nil, parent);
        var desires = nil;

        // meter_beat -> Crotchets
        desires = [Toke_Crotchets.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Crotchets", toker.burn(Toke_Crotchets.class));
            ^noad;
        };

        // meter_beat -> Quavers
        desires = [Toke_Quavers.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Quavers", toker.burn(Toke_Quavers.class));
            ^noad;
        };

        // meter_beat -> Quarters
        desires = [Toke_Quarters.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Quarters", toker.burn(Toke_Quarters.class));
            ^noad;
        };

        // meter_beat -> Eighths
        desires = [Toke_Eighths.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Eighths", toker.burn(Toke_Eighths.class));
            ^noad;
        };

        // meter_beat -> Slash
        desires = [Toke_Slash.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Slash", toker.burn(Toke_Slash.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_al_coda {
        | parent |

        var noad = SkoarNoad.new("optional_al_coda", nil, parent);
        var desires = nil;

        // optional_al_coda -> AlCoda
        desires = [Toke_AlCoda.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_AlCoda", toker.burn(Toke_AlCoda.class));
            ^noad;
        };

        // <e>
        ^noad;
    }

    boolean {
        | parent |

        var noad = SkoarNoad.new("boolean", nil, parent);
        var desires = nil;

        // boolean -> skoaroid BooleanOp skoaroid
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.skoaroid(noad));
            noad.add_toke("Toke_BooleanOp", toker.burn(Toke_BooleanOp.class));
            noad.add_noad(this.skoaroid(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    noat_reference {
        | parent |

        var noad = SkoarNoad.new("noat_reference", nil, parent);
        var desires = nil;

        // noat_reference -> Symbol
        desires = [Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Symbol", toker.burn(Toke_Symbol.class));
            ^noad;
        };

        // noat_reference -> CurNoat
        desires = [Toke_CurNoat.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_CurNoat", toker.burn(Toke_CurNoat.class));
            ^noad;
        };

        // noat_reference -> listy
        desires = [Toke_ListS.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.listy(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    cthulhu_prime {
        | parent |

        var noad = parent;
        var desires = nil;

        // cthulhu_prime -> boolean CondSep RWing
        desires = [Toke_Tuplet.class, Toke_Float.class, Toke_LWing.class, Toke_CondS.class, Toke_QuindicesimaA.class,
                   Toke_Caesura.class, Toke_Choard.class, Toke_OttavaA.class, Toke_Slur.class, Toke_PedalDown.class,
                   Toke_ListS.class, Toke_Symbol.class, Toke_Rep.class, Toke_CurNoat.class, Toke_AccSharp.class,
                   Toke_VectorNoat.class, Toke_DubRep.class, Toke_DynForte.class, Toke_Portamento.class, Toke_DynFP.class,
                   Toke_PedalUp.class, Toke_QuindicesimaB.class, Toke_Loco.class, Toke_Int.class, Toke_AccNatural.class,
                   Toke_DynPiano.class, Toke_AccFlat.class, Toke_OttavaB.class, Toke_DynSFZ.class, Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.boolean(noad));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep.class));
            noad.add_toke("Toke_RWing", toker.burn(Toke_RWing.class));
            ^noad;
        };

        // cthulhu_prime -> Nosey CondSep RWing
        desires = [Toke_Nosey.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Nosey", toker.burn(Toke_Nosey.class));
            noad.add_toke("Toke_CondSep", toker.burn(Toke_CondSep.class));
            noad.add_toke("Toke_RWing", toker.burn(Toke_RWing.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    ottavas {
        | parent |

        var noad = SkoarNoad.new("ottavas", nil, parent);
        var desires = nil;

        // ottavas -> OttavaA
        desires = [Toke_OttavaA.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_OttavaA", toker.burn(Toke_OttavaA.class));
            ^noad;
        };

        // ottavas -> OttavaB
        desires = [Toke_OttavaB.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_OttavaB", toker.burn(Toke_OttavaB.class));
            ^noad;
        };

        // ottavas -> QuindicesimaA
        desires = [Toke_QuindicesimaA.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_QuindicesimaA", toker.burn(Toke_QuindicesimaA.class));
            ^noad;
        };

        // ottavas -> QuindicesimaB
        desires = [Toke_QuindicesimaB.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_QuindicesimaB", toker.burn(Toke_QuindicesimaB.class));
            ^noad;
        };

        // ottavas -> Loco
        desires = [Toke_Loco.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Loco", toker.burn(Toke_Loco.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    listy {
        | parent |

        var noad = SkoarNoad.new("listy", nil, parent);
        var desires = nil;

        // listy -> ListS listy_suffix
        desires = [Toke_ListS.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_ListS", toker.burn(Toke_ListS.class));
            this.listy_suffix(noad);
            ^noad;
        };

        // Error State
        this.fail;
    }

    optional_carrots {
        | parent |

        var noad = SkoarNoad.new("optional_carrots", nil, parent);
        var desires = nil;

        // optional_carrots -> Carrots
        desires = [Toke_Carrots.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Carrots", toker.burn(Toke_Carrots.class));
            ^noad;
        };

        // <e>
        ^noad;
    }

    nouny_literal {
        | parent |

        var noad = parent;
        var desires = nil;

        // nouny_literal -> Tuplet
        desires = [Toke_Tuplet.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Tuplet", toker.burn(Toke_Tuplet.class));
            ^noad;
        };

        // nouny_literal -> Caesura
        desires = [Toke_Caesura.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Caesura", toker.burn(Toke_Caesura.class));
            ^noad;
        };

        // nouny_literal -> Slur
        desires = [Toke_Slur.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Slur", toker.burn(Toke_Slur.class));
            ^noad;
        };

        // nouny_literal -> Int
        desires = [Toke_Int.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Int", toker.burn(Toke_Int.class));
            ^noad;
        };

        // nouny_literal -> Float
        desires = [Toke_Float.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_Float", toker.burn(Toke_Float.class));
            ^noad;
        };

        // nouny_literal -> String
        desires = [Toke_String.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_String", toker.burn(Toke_String.class));
            ^noad;
        };

        // Error State
        this.fail;
    }

    meteroid {
        | parent |

        var noad = SkoarNoad.new("meteroid", nil, parent);
        var desires = nil;

        // meteroid -> meter_symbolic
        desires = [Toke_Carrots.class, Toke_Symbol.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.meter_symbolic(noad));
            ^noad;
        };

        // meteroid -> clef
        desires = [Toke_BassClef.class, Toke_TrebleClef.class, Toke_AltoClef.class];
        if (toker.sees(desires)) {
            noad.add_noad(this.clef(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

    dal_goto {
        | parent |

        var noad = SkoarNoad.new("dal_goto", nil, parent);
        var desires = nil;

        // dal_goto -> DaCapo al_whatnow
        desires = [Toke_DaCapo.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DaCapo", toker.burn(Toke_DaCapo.class));
            noad.add_noad(this.al_whatnow(noad));
            ^noad;
        };

        // dal_goto -> DalSegno al_whatnow
        desires = [Toke_DalSegno.class];
        if (toker.sees(desires)) {
            noad.add_toke("Toke_DalSegno", toker.burn(Toke_DalSegno.class));
            noad.add_noad(this.al_whatnow(noad));
            ^noad;
        };

        // Error State
        this.fail;
    }

}

