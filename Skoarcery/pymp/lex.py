# ========================================================================
# lex - Generated by Code_Py_Lexer on 2014-04-28 01:32:23 for Python 3.3.2
# ========================================================================

import re
import abc


# --------------
# Abstract Token
# --------------
class SkoarToke:

    __metaclass__ = abc.ABCMeta

    regex = None

    def __init__(self, s):
        self.buf = s

    # how many characters to burn from the buffer
    def burn(self, *args):
        return len(self.buf)

    # override and return nil for no match, new toke otherwise
    @staticmethod
    @abc.abstractstaticmethod
    def match(buf, offs):
        raise NotImplementedError

    @staticmethod
    def match_toke(buf, offs, toke_class):

        match = toke_class.regex.match(buf, offs)

        if match:
            print("\n\n" + toke_class.__name__ + ": MATCH: {" + match.group(0) + "}")
            return toke_class(match.group(0))

        return None


# ---------------------
# Whitespace is special
# ---------------------
class Toke_WS(SkoarToke):
    regex = re.compile(r"\s*")

    @staticmethod
    def burn(buf, offs):

        match = Toke_WS.regex.match(buf, offs)

        if match:
            return len(match.group(0))

        return 0


# --------------
# EOF is special
# --------------
class Toke_EOF(SkoarToke):
    regex = re.compile(r"$")

    @staticmethod
    def burn(buf, offs):
        if len(buf) > offs:
            raise Exception("Tried to burn EOF when there's more input.")

        return 0

    @staticmethod
    def match(buf, offs):

        if len(buf) <= offs:
            assert len(buf) == offs
            return Toke_EOF("")

        return None


# --------------
# Everyday Tokes
# --------------
class Toke_Segno(SkoarToke):
    regex = re.compile(r"%S%|al segno")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Segno)


class Toke_Crotchets(SkoarToke):
    regex = re.compile(r"}+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Crotchets)


class Toke_DubRep(SkoarToke):
    regex = re.compile(r"/\.\|\./")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DubRep)


class Toke_QuindicesimaB(SkoarToke):
    regex = re.compile(r"15mb|alla quindicesimb")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_QuindicesimaB)


class Toke_MsgNameWithArgs(SkoarToke):
    regex = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*<")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_MsgNameWithArgs)


class Toke_ListSep(SkoarToke):
    regex = re.compile(r",")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_ListSep)


class Toke_Slash(SkoarToke):
    regex = re.compile(r"/")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Slash)


class Toke_TrebleClef(SkoarToke):
    regex = re.compile(r"G:|treble:")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_TrebleClef)


class Toke_Portamento(SkoarToke):
    regex = re.compile(r"~~~")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Portamento)


class Toke_RWing(SkoarToke):
    regex = re.compile(r"\)\^\^")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_RWing)


class Toke_MsgName(SkoarToke):
    regex = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_MsgName)


class Toke_DynForte(SkoarToke):
    regex = re.compile(r"mf|f+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DynForte)


class Toke_AccSharp(SkoarToke):
    regex = re.compile(r"#|sharp")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AccSharp)


class Toke_Eighths(SkoarToke):
    regex = re.compile(r"\]+\.+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Eighths)


class Toke_DalSegno(SkoarToke):
    regex = re.compile(r"D\.S\.|Dal Segno")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DalSegno)


class Toke_PedalUp(SkoarToke):
    regex = re.compile(r"\*")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_PedalUp)


class Toke_MsgOp(SkoarToke):
    regex = re.compile(r"\.")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_MsgOp)


class Toke_NoatFlats(SkoarToke):
    regex = re.compile(r"b")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_NoatFlats)


class Toke_LWing(SkoarToke):
    regex = re.compile(r"\^\^\(")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_LWing)


class Toke_MeterS(SkoarToke):
    regex = re.compile(r"<!")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_MeterS)


class Toke_Coda(SkoarToke):
    regex = re.compile(r"\(\+\)")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Coda)


class Toke_AlCoda(SkoarToke):
    regex = re.compile(r"al(la)? coda")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AlCoda)


class Toke_NoatSharps(SkoarToke):
    regex = re.compile(r"#")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_NoatSharps)


class Toke_AccNatural(SkoarToke):
    regex = re.compile(r"nat")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AccNatural)


class Toke_ListE(SkoarToke):
    regex = re.compile(r">")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_ListE)


class Toke_AlFine(SkoarToke):
    regex = re.compile(r"al fine")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AlFine)


class Toke_Tuplet(SkoarToke):
    regex = re.compile(r"/\d+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Tuplet)


class Toke_Carrots(SkoarToke):
    regex = re.compile(r"\^+(^\^\^\()")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Carrots)


class Toke_ZedPlus(SkoarToke):
    regex = re.compile(r"[1-9][0-9]+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_ZedPlus)


class Toke_Volta(SkoarToke):
    regex = re.compile(r"\[\d+\.\]")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Volta)


class Toke_MeterE(SkoarToke):
    regex = re.compile(r"!>")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_MeterE)


class Toke_String(SkoarToke):
    regex = re.compile(r"'[^']*'")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_String)


class Toke_DaCapo(SkoarToke):
    regex = re.compile(r"D\.C\.|Da Capo")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DaCapo)


class Toke_Quavers(SkoarToke):
    regex = re.compile(r"o+/")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Quavers)


class Toke_BooleanOp(SkoarToke):
    regex = re.compile(r"== | != | <= | >= | in | nin | and | or | xor")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_BooleanOp)


class Toke_DynSFZ(SkoarToke):
    regex = re.compile(r"sfz")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DynSFZ)


class Toke_CondSep(SkoarToke):
    regex = re.compile(r";")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_CondSep)


class Toke_Symbol(SkoarToke):
    regex = re.compile(r"\[a-zA-Z][a-zA-Z0-9]+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Symbol)


class Toke_Caesura(SkoarToke):
    regex = re.compile(r"//")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Caesura)


class Toke_Bars(SkoarToke):
    regex = re.compile(r":?[\|]+:?")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Bars)


class Toke_AltoClef(SkoarToke):
    regex = re.compile(r"C:|alto:")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AltoClef)


class Toke_CurNoat(SkoarToke):
    regex = re.compile(r"\$")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_CurNoat)


class Toke_AccFlat(SkoarToke):
    regex = re.compile(r"flat")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AccFlat)


class Toke_Nosey(SkoarToke):
    regex = re.compile(r",")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Nosey)


class Toke_Float(SkoarToke):
    regex = re.compile(r"(\+|-)?(0|[1-9][0-9]+)\.[0-9]+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Float)


class Toke_AlSegno(SkoarToke):
    regex = re.compile(r"al segno")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AlSegno)


class Toke_DynFP(SkoarToke):
    regex = re.compile(r"fp")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DynFP)


class Toke_QuindicesimaA(SkoarToke):
    regex = re.compile(r"15ma|alla quindicesima")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_QuindicesimaA)


class Toke_Int(SkoarToke):
    regex = re.compile(r"(\+|-)?(0|[1-9][0-9]+)")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Int)


class Toke_CondS(SkoarToke):
    regex = re.compile(r"{")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_CondS)


class Toke_BassClef(SkoarToke):
    regex = re.compile(r"F:|bass:")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_BassClef)


class Toke_ListS(SkoarToke):
    regex = re.compile(r"<")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_ListS)


class Toke_Slur(SkoarToke):
    regex = re.compile(r"\+\+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Slur)


class Toke_OttavaB(SkoarToke):
    regex = re.compile(r"8v?b|ottava (bassa|sotto)")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_OttavaB)


class Toke_Loco(SkoarToke):
    regex = re.compile(r"loco")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Loco)


class Toke_CondE(SkoarToke):
    regex = re.compile(r"}")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_CondE)


class Toke_AssOp(SkoarToke):
    regex = re.compile(r"=>")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_AssOp)


class Toke_Rep(SkoarToke):
    regex = re.compile(r"\./\.")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Rep)


class Toke_Choard(SkoarToke):
    regex = re.compile(r"[A-G]([Mm0-9]|sus|dim)*")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Choard)


class Toke_DynPiano(SkoarToke):
    regex = re.compile(r"mp|p+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_DynPiano)


class Toke_PedalDown(SkoarToke):
    regex = re.compile(r"Ped\.")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_PedalDown)


class Toke_MeterSig(SkoarToke):
    regex = re.compile(r"(\d+(\+\d)+/\d)")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_MeterSig)


class Toke_VectorNoat(SkoarToke):
    regex = re.compile(r"[a-g](#*|b*)")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_VectorNoat)


class Toke_Fine(SkoarToke):
    regex = re.compile(r"fine")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Fine)


class Toke_OttavaA(SkoarToke):
    regex = re.compile(r"8v?a|ottava (alta|sopra)|all' ottava")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_OttavaA)


class Toke_Quarters(SkoarToke):
    regex = re.compile(r"\]+\.+")

    @staticmethod
    def match(buf, offs):
        return SkoarToke.match_toke(buf, offs, Toke_Quarters)


